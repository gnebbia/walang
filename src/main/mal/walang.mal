/*
 * Copyright 2021 Giuseppe Nebbione
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#id: "ml.gnebbia.walang"
#version: "1.0.0"

category WebSystem {

  asset WebServer { }
  // maybe here we should put vulns related to the webserver


  asset DataFlow {
    | eavesdrop
        user info: "An attacker eavesdrops the data flow, can access the contained data."
        -> data.read
    | denialOfService
        user info: "A denial-of-service-attack on the dataflow makes the contained data inaccessible."
        -> data.delete
    | manInTheMiddle
        user info: "A man-in-the-middle attack on the dataflow allows different operation on data."
        -> data.read,
           data.write,
           data.delete
    # encryption
        -> eavesdrop
  }

  asset Data {
    | read
    | write
    | delete
  }


  asset Vulnerability {
    | clickjacking
    | xss
    | sqlinjection
  }

  asset DataBase { }

  asset WebApplication { }



  asset SecurityToken {
    | obtain
      -> account.authenticate
  }

  asset Password extends SecurityToken { }

  asset Cookie extends SecurityToken { }

  asset URL { }

  asset InputField { }


  asset DBInteractionInputField extends InputField { }

  asset ReflectedInputField extends InputField { }

  asset Resource { }

  asset SensitiveFile extends Resource{ }

  asset SensitiveResource extends Resource{ }


  asset AdminArea {
    | discover
      -> access,
         connect
    | connect
      -> access
    | authenticate
      -> access
    | guessPassword
      -> guessedPassword
    | guessedPassword [Exponential(0.02)]
      -> administrators.authenticate
    & access
  }

  asset User {
    | attemptPhishing
      -> phish
    | phish [Exponential(0.1)]
      -> account.tokens.obtain
  }

  asset Account {
    | authenticate
  }


//  asset Privilege {
//    | compromise
//  }


  asset Administrator extends Account{ }

}

associations {
  WebServer[webserver]           1    <--    Hosts          -->    1 [webapplication]WebApplication
  WebServer[webserver]           1    <--    Vulnerable     -->    * [vulnerabilities]Vulnerability

  WebApplication[webapplication] 1    <--    Composed       -->    * [urls]URL
  WebApplication[webapplication] 1    <--    DataStore      -->    * [dbs]DataBase

  WebApplication[webapplication] 1    <--    Usage          -->    * [users]User
  WebApplication[webapplication] 1    <--    Administered   -->    1 [adminarea]AdminArea

  URL[url]                       1    <--    Contains       -->    * [inputfields]InputField
  URL[url]                       1    <--    Owns           -->    * [resources]Resource

  AdminArea[adminarea]           1    <--    Administration -->    * [administrators]Administrator

  User[user]                     1    <--    UserAccount    -->    1 [account]Account
  User[user]                     1    <--    Communication  -->    1 [dataflow]DataFlow
  
  Account[account]               1    <--    Credentials    -->    * [tokens]SecurityToken

  DataFlow[dataflow]             1    <--    Transmission   -->    * [data]Data
}


