/*
 * Copyright 2021 Giuseppe Nebbione
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#id: "ml.gnebbia.walang"
#version: "1.0.0"

category WebSystem {

  asset WebServer 
  user info: "The WebServer hosting the Web Application."
  { 
      & attemptDOSExploit
          -> dosExploit
      & dosExploit
          user info: "A denial-of-service exploit makes the data unavailable."
          -> data.unavailable,
             webapplication.dos

      & attemptRCEExploit
          -> rceExploit
      & rceExploit
          user info: "A remote code execution exploit allows to execute commands on the webserver."
          -> privilegedCodeExecution,
             data.read,
             data.write,
             data.delete,
             data.unavailable,
             webapplication.deface,
             webapplication.dos,
             webapplication.abusePrivileges,
             webapplication.infoDisclosure


      & attemptPrivescExploit
          -> privescExploit

      & privescExploit
          user info: "A privilege escalation exploit allows to execute commands as the administrator (e.g., root)."
          -> privilegedCodeExecution

      & privilegedCodeExecution
          user info: "A privileged code execution is obtained only if there is a remote code execution vulnerability coupled with a Privilege Escalation vulnerability"

      # fullyPatchedWebServer
          user info: "If the server is fully patched then it is not vulnerable to known weaknesses."
          -> dosExploit,
             rceExploit,
             privescExploit


      & attemptSniff
          -> sniff
      & sniff
          user info: "If TLS is disabled, encryption for data is not available."
          -> dataflows.eavesdrop,
             dataflows.manInTheMiddle,
             attemptCookieEavesDrop
      # encryption
          user info: "Enabling appropriate encryption prevents all threats associated to transmission of plaintext data."
          -> sniff

      & attemptClickjacking
          -> clickjacking
      & clickjacking
          user info: "If the X-Frame-Options header is disabled the Web Application is vulnerable to clickjacking attacks."
      # xFrameOptionsEnabled
          user info: "If the X-Frame-Options header is enabled the Web Application cannot be embedded into a frame hence it is not vulnerable to clickjacking attacks."
          -> clickjacking

     
      & attemptCookieEavesDrop
          user info: "If cookies are not set with the 'secure' flag, they may be eavesdropped."
          -> cookieEavesdrop
      # secureFlagEnabled
          user info: "If cookies are set with the 'secure' flag, they may not be eavesdropped."
          -> cookieEavesdrop

      & cookieEavesdrop
        user info: "If cookies are not set with the 'secure' flag and the web Application is not using TLS then cookies can be eavesdropped."


  }


  asset Data 
  user info: "Data in this context is generic and represents all the data managed by the Web Application."
  {
    | read
    | write
    | delete
    | unavailable
        user info: "Unavailable data is equivalent to a Denial-of-Service attack on data."
  }

  asset DataFlow 
  user info: "A DataFlow represents data that is in transit (e.g., transmitted/received)."
  {
    & eavesdrop
        user info: "An attacker that eavesdrops the dataflow can access the contained data."
        -> dataInTransit.read

    & manInTheMiddle
        user info: "A man-in-the-middle attack on the dataflow allows different operation on data."
        -> dataInTransit.read,
           dataInTransit.write,
           dataInTransit.delete

    & denialOfService
        user info: "A denial-of-service attack on the dataflow makes the contained data inaccessible."
        -> dataInTransit.delete
  }

  asset DataBase
  user info: "A DataBase contains data that is at rest."
  { 
    | read
        -> databaseData.read

    | write
        -> databaseData.write

    | delete
        -> databaseData.delete
  }

  asset Endpoint
  user info: "An endpoint is a resource or a URL within a Web Application."
  {

    | connect
        -> access

    & access
        -> inputfields.discover
  }

  asset LinkedEndpoint extends Endpoint
  user info: "A LinkedEndpoint is a resource or a URL within a Web Application that can be found by crawling."
  {
    | discover
        -> access,
           connect
  }

  asset HiddenEndpoint extends Endpoint 
  user info: "A HiddenEndpoint is a resource or an URL within a Web Application that cannot be found by crawling."
  developer info: "An example may be a URL not linked anywhere in the web application."
  { 
    | bruteforce [Exponential(0.02)]
        -> discover
    & discover
        -> access,
           connect
  }

  asset PrivateEndpoint extends Endpoint 
  user info: "A PrivateEndpoint is a resource or an URL within a Web Application accessible only to a specific logged-on user."
  developer info: "An example may be an URL containing sensitive info related to the logged-on user."
  { 
    | bruteforce [Exponential(0.02)]
        -> discover

    & discover
        -> attemptAccess

    & authenticate
        -> connect,
           access

    & attemptAccess
        -> accessWithoutCredentials

    & accessWithoutCredentials
        -> account.infoDisclosure

    # enforceAccessControl
    user info: "Enforcing Access Control prevents Broken Authorization weaknesses."
        -> accessWithoutCredentials
  }


  asset WebApplication
  user info: "The Web Application under exam."
  { 
    | crawl
        user info: "Crawling allows the mapping of the publicly exposed Web Application surface."
        -> endpoints[LinkedEndpoint].discover,
           adminarea.discover
    | directoryBruteForce
        user info: "Directory brute-forcing is used to discover resources which are not directly linked within the Web Application."
        -> endpoints[HiddenEndpoint].bruteforce,
           endpoints[PrivateEndpoint].bruteforce,
           adminarea.discover
    | accountEnumeration
        -> accounts.getUserName

    & dos
        user info: "The Web Application is under a denial of service attack."
    & abusePrivileges
        user info: "Either horizontal or vertical privilege escalation is performed within the application, this allows a user to perform actions impersonating another user."
    & infoDisclosure
        user info: "Information about the web application or about its users is disclosed (e.g., source code/database)."
    & deface
  }


  asset SecurityToken
  user info: "A security token can be used to manage access control for users within the Web Application."
  {
    | obtain
      -> account.authenticate
  }

  asset Password extends SecurityToken 
  user info: "A password is a security token used to authenticate users within the Web Application."
  { 
    // intentionally left blank
  }

  asset Cookie extends SecurityToken
  user info: "A cookie in this context is inteded as an authorization cookie that can be used by attackers to impersonate other users."
  { 
    // intentionally left blank
  }


  asset InputField 
  user info: "An InputField represents everything that can be manipulated by the user, such as parameters of HTTP requests or form fields contained in web pages."
  { 
    | discover
        user info: "A discovered input field can be fuzzed by an attacker."
        -> fuzz
    & fuzz
        user info: "Extensive Fuzzing could lead to the exploitation of different vulnerabilities."
        -> sqlinjection,
           xss

    // For reasons of brevity only SQLInjection and XSS have been considered
    & sqlinjection [Exponential(0.02)]
        user info: "SQL Injection allows access to the database associated to the Web Application."
        -> dbs.read,
           dbs.write,
           dbs.delete
    & xss [Exponential(0.05)]
        user info: "XSS allows to abuse privileges related to other users."
        -> webapplication.abusePrivileges

    # sanitizedInput
        user info: "If the input is sanitized, exploits cannot be executed"
        -> sqlinjection,
           xss

  }

  asset AdminArea
  user info: "An AdminArea represents the area of Application where administrators its administrators can log-in."
  {
    | discover
        user info: "Sometimes Admin Areas are hidden and must be discovered to be accessed."
        -> access,
           connect
    | connect
        -> access
    | authenticate
        -> access
    | guessPassword
        -> guessedPassword
    | guessedPassword [Exponential(0.02)]
        -> administrators.authenticate
    # twoFactorAuthentication
        -> guessedPassword
    & access
        -> webapplication.deface,
           webapplication.abusePrivileges,
           webapplication.infoDisclosure
  }

  asset Account
  user info: "An Account represents something that can be used to log-in."
  {
    & getUserName
        user info: "The Web Application allows getting the username of its users."
    # noUserHints
        user info: "The Web Application uses generic error messages and other appropriate mitigations to prevent enumeration of the username."
        -> getUserName
    | authenticate
        -> privateinfo.read,
           privateinfo.write,
           privateinfo.delete,
           accessPrivateResources
    | infoDisclosure
        user info: "Information Disclosure in this context not only allows to read private information but also to access private resources of a user."
        -> privateinfo.read

    & accessPrivateResources
        -> privateurls.access

    | attemptPhishing
        -> phish
    | phish [Exponential(0.1)]
        -> tokens.obtain
  }

  asset Administrator extends Account
  user info: "An Administrator is an account that can log-in into the AdminArea."
  {
    // intentionally left blank
  }

}




associations {
  WebServer[webserver]           1    <--    Hosts          -->    1 [webapplication]WebApplication
  WebServer[webserver]           1    <--    Transmission   -->    * [dataflows]DataFlow
  WebServer[webserver]           1    <--    RetrieveInfo   -->    * [data]Data


  WebApplication[webapplication] 1    <--    Compose        -->    * [endpoints]Endpoint
  WebApplication[webapplication] 1    <--    Administration -->    1 [adminarea]AdminArea
  WebApplication[webapplication] 1    <--    Containment    -->    * [inputfields]InputField
  WebApplication[webapplication] 1    <--    Usage          -->    * [accounts]Account

  Endpoint[url]                  1    <--    Containment    -->    * [inputfields]InputField


  InputField[inputfield]         1    <--    Interact       -->    * [dbs]DataBase


  AdminArea[adminarea]           1    <--    Administration -->    * [administrators]Administrator

  Account[account]               1    <--    Credentials    -->    * [tokens]SecurityToken
  Account[account]               1    <--    Resources      -->    * [privateurls]PrivateEndpoint
  Account[account]               1    <--    Resources      -->    * [privateinfo]Data

  DataFlow[dataflow]             1    <--    Transmission   -->    * [dataInTransit]Data
  DataBase[db]                   1    <--    DataStore      -->    * [databaseData]Data
}
